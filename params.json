{"name":"Detailcheck","tagline":"detail check tool for java","body":"InnerTest: A Unit Testing Tool Supporting Input-Specific Assertions on Internal States\r\n\r\nIntroduction\r\nPeople\r\nDownload\r\nGuide\r\nContact\r\nIntroduction\r\n\r\nInnerTest is a tool that supporting input-specific assertion on internal states.\r\n\r\nAn important factor of the fault-detection capability of a test suite is how well the test oracles catch a triggered fault. Traditional test oracles are defined on the outputs of test executions. Recently, researchers have shown theoretically that test oracles defined on the internal states of execution could improve the fault-detection capability. However, in practice, we can only write assertions that are common to all test inputs, and there is no supporting mechanism for the testers to write input-specific assertions on internal states.\r\n\r\nPeople\r\n\r\nMuyao Zhu\tMaster Student at Peking University\r\nTao Zhu\tMaster Student at Peking University\r\nYingfei Xiong\tAssistant Professor at Peking University\r\nDan Hao\tAssociate Professor at Peking University\r\nLu Zhang\tProfessor at Peking University\r\nDownload\r\n\r\nInnerTest is implemented as a Java library, you can download the library .jar file here Download\r\n\r\nA Guide to the Samples\r\n\r\nSample Code\r\nFigure 1: Sample Source Code & Test Code\r\n\r\nWe take source code and test code in Figure 1&2 for example. The code calculates whether the number of positives is bigger than negatives or not. But there is a bug in the source code. The element \"0\" will be treated as negative.\r\n\r\nBut test with input int[] input = new int[]{-2, -1, 0, 1, 2, 3, 4} cannot find the error, the return value still be 1. (The number of negatives was calculated as 3, which should be 2. But the number of positives of 4, 4 is bigger than 3 and 2.)\r\n\r\nThen we use InnerTest to write input-specific assertion on internal state to find this error. First we should import our library into your build path. Besides our tool, you need also make sure that tools.jar from your Java SDK should be imported into your build path.\r\n\r\nWe provide several kinds of interfaces for testers to locate the code to be checked, here we use the one that first add a marker inside the code to locate where to check: Controller.addCheck(String locationKey, int times, Object input, Object expectedValue, String expression) It has 5 parameters.\r\n\r\nThe first one is the marker identifier, which we defined in source ocde, to locate the code where we want to check or test\r\n\r\nThe second parameter is execution times, it defines at which time executing here, we check the expression and value. The reason that we import this parameter into interface is that, a statement may be executed several times in one test, and specifying only the location does not distinguish different executions.\r\n\r\nThe third one is class object, to specifies the Java file that we should instrument. We use the class name to locate a file name because the source file name is not available in Java byte code.\r\n\r\nThe last two are theexpression to be checked and the expected value, in this example, theyshould be integer value 2 and variable negative, means checking whether negative == 2 or not. Last but not lease, you should invoke a clean method Controller.clean(). To ensure that the assertion is only effective during the execution of the test. This clean up is necessary because there may be dependencies between tests. When there are dependencies, we cannot start a new process for each test execution, but has to execute one test after another in one process. See Fig 3 belo.\r\n\r\nWrite InnerTest oracle\r\nFigure 3: Write Internal oracle\r\n\r\nBefore you run your InnerTest test, you should configure the JVM arguments in Run Configuration. Right click the test code, Go to Run As -> Run Configurations -> Arguments -> VM arguments, add one line arguments \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\", this means you allow jdb to modify your class file\r\n\r\nrun configuration\r\nFigure 4: Run Configuration\r\n\r\nAfter that, you can run you InnerTest test now. Fig 5 below shows the result of the InnerTest, the result says that the variable negative should be \"2\", but actually it's \"3\".\r\n\r\nTest result\r\nFigure 5: Test Result\r\n\r\nContact\r\n\r\nPlease contact \"zhumuyao@gmail.com\" if you had any questions about InnerTest","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}